/**
    @file   gameboard.hpp
    @author Hanna Dutkiewicz
*/

#ifndef GAMEBOARD_H
#define GAMEBOARD_H

#include <QObject>
#include <boost/multi_array.hpp>
#include <boost/shared_ptr.hpp>
#include "field.hpp"

/**
    @class GameBoard
    @author Hanna Dutkiewicz
    Represents a game board of a "Tic-Tac-Toe" game.
  */
class GameBoard: public QObject{
    Q_OBJECT

    friend class GameWindow;


/********* PUBLIC METHODS **********/
public:
	/**
		A default constructor.
	*/
	GameBoard(QObject * parent = 0);

   /**
     A destructor.
     */
    ~GameBoard();

    /**
      Method is called to start a new game. It clears current scene and creates new fields on it.
      */
    void startNewGame();

    /**
      Method called when a game is finished to stop the game, actualize game tree and show the winner.
      */
    void endGame();

	void setGraphicsScene(boost::shared_ptr<QGraphicsScene> scene);



/********* PUBLIC SLOTS **********/
public slots:
    /**
      Slot connected to signal generated by single field when it was clicked.
      */
    void fieldWasClickedSlot();


signals:
	void playerMadeAmoveSignal(std::pair<int,int> coordinates);


/********* PRIVATE METHODS **********/
private:
    /**
      Clears the scene an deletes all the fields.
      */
    void clear();



/********* PRIVATE FIELDS **********/
private:
    /** All the fields on a board game */
	Field ** field_;

    /** A pointer to a graphics scene */
	boost::shared_ptr<QGraphicsScene> scene_;



/********* CONSTS **********/
private:
    /** Maximum fields in a row of a game board */
    static const int MAX_IN_A_ROW = 3;

};

#endif // GAMEBOARD_H
